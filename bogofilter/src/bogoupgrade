#!/usr/bin/perl

=pod

Name:
bogoupgrade -- upgrade a bogofilter database to current version.

Author:
Gyepi Sam <gyepi@praxis-sw.com>
David Relson <relson@osagesoftware.com>

=cut

# bogofilter-0.3 through bogofilter-0.6.3
#
#	HEADER "# bogofilter email-count (format version A): %lu"
#

# bogofilter-0.7.x
#
#	HEADER "# bogofilter email-count (format version B): %lu"
#

# bogofilter-0.8 to bogofilter-0.13.x
#
# BerkeleyDB with double wordlists 
#	spamlist.db and goodlist.db

# bogofilter-0.14 and later
#
# BerkeleyDB with single wordlist
#	wordlist.db

my $VERSION = '0.2';

my ($in, $out, $help);

my $bogoutil = 'bogoutil';

for (my $i = 0; $i < @ARGV; $i++){

  my $arg = $ARGV[$i];

  if ($arg eq '-d'){
    $dir = $ARGV[++$i];
  }
  elsif ($arg eq '-i'){
    $in = $ARGV[++$i];
  }
  elsif ($arg eq '-o'){
    $out = $ARGV[++$i];
  }
  elsif ($arg eq '-b'){
    $bogoutil = $ARGV[++$i];
  }
  elsif ($arg eq '-y'){
    $yday = "-y $ARGV[++$i]";
  }
  elsif ($arg eq '-h'){
    help();
    exit(1);
  }
  else {
    usage();
    exit(1);
  }
}

if ( $dir ) {
    convert_double_to_single();
}
else {
    die "Missing input filename\n" unless $in;
    die "Missing output filename\n" unless $out;

    my $msg_count_token = '.MSG_COUNT';

    open(F, $in) or die "Cannot open input file [$in]. $!.\n";
    my $sig = <F>;
    chomp($sig);
    if ($sig =~ m/^\# bogofilter wordlist \(format version A\):\s(\d+)$/){ 
	convert_format_A();
    }
    elsif ($sig =~ m/^\# bogofilter wordlist \(format version A\):\s(\d+)$/){ 
	convert_format_B();
    }
    else {
	warn "Cannot recognize signature [$sig].\n";
	exit(2);
    }
}

sub convert_format_A() {  
  my $msg_count = $1;
  my $cmd = qq[$bogoutil $yday -l $out];
  open(OUT, "|$cmd") or die "Cannot run command [$cmd]. $!\n";
  while(<F>){
    print OUT $_;
  }
  print OUT "$msg_count_token $msg_count\n";
  close(OUT);
  close(F);
}

sub convert_format_B() {
  my $msg_count = $1;
  my $in_db = $in;
  $in_db =~ s/count$/db/;

  unless (-f $in_db){
    warn("Cannot find database file [$in_db] corresponding to input file [$in]\n");
    exit;
  }
  
  my $cmd = qq[$bogoutil $yday -l $out];
  open(OUT, "|$cmd") or die "Cannot run command [$cmd]. $!\n";

  close(F);
  $cmd = qq[$bogoutil $yday -d $in_db];
  open(F, "$cmd|") or die "Cannot run command [$cmd]. $!\n";

  while(<F>){
    if (m/^\.count\s+(\d+)$/){
      warn("Found a message count of [$1] in db. Throwing away text file count of [$msg_count]\n");
      $msg_count = $1;
      next;
    }
    elsif (/^$msg_count_token\s(\d+)$/){
      warn("This database appears to have been upgraded already.\nBut there's no harm in doing it again.\n");
      $msg_count = $1;
      next;
    }
    print OUT $_;
  }
  print OUT "$msg_count_token $msg_count\n";

  close(F);
  close(OUT);
}

sub convert_double_to_single() {  
    $word = "$dir/wordlist.db";
    open(F, $word) and die "$word already exists.\n";
    close(F);

    $spam = "$dir/spamlist.db";
    open(F, $spam) or die "Cannot open file [$spam].\n";
    close(F);

    $good = "$dir/goodlist.db";
    open(F, $good) or die "Cannot open file [$good].\n";
    close(F);

    $cmd = qq[
    ( $bogoutil -d $spam | awk '{ printf \"%s %d 0 %d\\n\", \$1, \$2, \$3}' ; \
      $bogoutil -d $good | awk '{ printf \"%s 0 %d %d\\n\", \$1, \$2, \$3}'   \
      ) | sort | $bogoutil -l $word ];

    system( $cmd );
}

exit(0);

sub usage {
  warn "usage: $0 [ -i <input text file> -o <output db file> [ -b <path to bogoutil>] ] [ -h ]\n";
}

sub help {
  print <<EOF;
  $0 -- upgrades bogofilter database to current version.
  Options:
    -i	<input file>.
      
        Text file containing message counts, and possibly data. If there is no
        data in the text file, there should be a  Berkeley DB file in the same
        directory as the text file which contains the data. 
            
   -o	<output file>
              
        Output Berkeley DB file.

   -b   <path to bogoutil program>

        Defaults to 'bogoutil', in the hopes that your shell will find it.
                
   -h	help
                  
	You are reading it.
EOF
	exit(0);
}
