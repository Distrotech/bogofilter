.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "BOGOFILTER" 1 "" "" ""
.SH NAME
bogofilter \- fast Bayesian spam filter
.SH "SYNOPSIS"

.nf
\fBbogofilter\fR [-s] [-h] [-S] [-H] [-p] [-d] [-v]
.fi

.SH "DESCRIPTION"

.PP
Bogofilter is a Bayesian spam filter. In its normal mode of operation, it takes an email message or other text on standard input, does a statistical check against lists of "ham" and "spam" words, and returns a status code indicating whether or not the message is spam. Bogofilter is designed with fast algorithms, uses the Berkeley DB for fast startup and lookups, coded directly in C, and tuned for speed, so it can be used for production by sites that process a lot of mail.

.SH "THEORY OF OPERATION"

.PP
Bogofilter treats its input as a bag of tokens. Each token is checked against "ham" and "spam" wordlists, which maintain counts of the numbers of times it has occurred in non-spam and spam mails. These numbers are used to compute the probability that a mail in which the token occurs is spam. After probabilities for all input tokens have been computed, a fixed number of the probabilities that deviate furtherest from average are combined using Bayes's theorem on conditional probabilities. If the computed probability that the input is spam exceeds 0.9, bogofilter returns 0, otherwise 1.

.PP
While this method sounds crude compared to the more usual pattern-matching approach, it turns out to be extremely effective. Paul Graham's paper A Plan For Spam: \fIhttp://www.paulgraham.com/spam.html\fR is recommended reading.

.PP
This program substantially improves on Paul's proposal by doing smarter lexical analysis. In particular, hostames and IP addresses are retained as regognition features rather than broken up. Various kinds of MTA cruft such as dates and message-IDs are discarded so as not to bloat the word lists. Lex's Swiss-army-knife nature rises again.

.PP
The input may be one message or many. Messages are broken up on From_ lines. The algorithm is relatively insensitive to message miscounts.

.PP
For speed, MIME and other attachments are not decoded. Experience from watching the token streams suggests that spam with enclosures invariably gives itself away through cues in the headers and non-enclosure parts.

.SH "OPTIONS"

.PP
Without command-line options, bogofilter returns 1 if the message is non-spam, 0 if it is spam. The non-spam wordfile is created if absent.

.PP
The \fB-s\fR tells bogofilter to register the text presented on standard input as spam. The spam wordfile is created if absent.

.PP
The \fB-h\fR tells bogofilter to register the text presented on standard
input as ham (non-spam).

.PP
The \fB-S\fR tells bogofilter to register the text presented on standard input as spam and to undo a prior registration of the same message as non-spam.

.PP
The \fB-H\fR tells bogofilter to register the text presented on standard
input as ham (non-spam) and to undo a prior registration of the same message as spam.

.PP
The \fB-d\fR allows you to set the directory under which wordlists will be found (normally \fI$HOME/.bogofilter\fR).

.PP
The \fB-l\fR lists wordlists. Used with \fB-h\fR, it lists the ham list; used with \fB-s\fR, it lists the spam list.

.PP
The \fB-p\fR (passthrough) option writes a copy of the input mail to the output with an X-Spam-Status header (in the style of SpamAssassin) inserted. The header will begin with "Yes" or "No" according as the mail is judged to be spam or non-spam respectively.

.PP
The \fB-v\fR option produces a report to standard output on bogofilter's analysis af the input. The report lists the tokens with highest deviation from a mean of 0.5 association with spam.

.SH "INTEGRATION WITH OTHER TOOLS"

.PP
The following procmail rule will take mail on stdin and direct it to \fIMail/spam\fR if bogofilter thinks it's spam:

.nf

:0HB:
* ? bogofilter
Mail/spam

.fi

.PP
If bogofilter fails (returning 2) the message will be treated as non-spam.

.PP
The following recipe (a) spam-bins anything that bogofilter rates as spam, (b) adds the words in messages rated as spam to the spam wordlist, and (c) adds the words in messages rated as non-spam to the non-spam wordlist. With this in place, it will normally only be necessary for the user to intervene (with \fB-N\fR or \fB-S\fR) when bogofilter miscategorizes something.

.nf

   :0HB
    * ? bogofilter
    {
            :0HBc
            | bogofilter -s

            :0
            $MUTT/spam
    }

    :0EHBc
    | bogofilter -n

.fi

.PP
There have been numerous requests for a bogofilter option to do the above, but the current implemention would make this quite painful. The procmail recipe is the best way for now.

.PP
The following \fI.muttrc\fR lines will create mutt macros for dispatching mail to bogofilter.

.nf

macro index d "<enter-command>unset wait_key\\n<pipe-entry>bogofilter -n\\n<enter-command>set wait_key\\n<delete-message>"
macro index \\ed "<enter-command>unset wait_key\\n<pipe-entry>bogofilter -s\\n<enter-command>set wait_key\\n<delete-message>"

.fi

.SH "RETURN VALUES"

.PP
0 for spam; 1 for non-spam; 2 for I/O or other errors.

.PP
Error 2 usually means that the wordlist files bogofilter wants to read at startup are missing.

.SH "FILES"

.TP
\fI~/.bogofilter/hamlist\fR
List of ham tokens.

.TP
\fI~/.bogofilter/spamlist\fR
List of spam tokens.

.SH "BUGS"

.PP
bogofilter counts messages on input by looking for From_ lines. As a special case, a single message without From_ line is counted correctly. Multiple messages without intervening From_ lines will be counted as one message.

.SH "AUTHOR"

.PP
Eric S. Raymond <esr@thyrsus.com>. For updates, see the bogofilter
project pages:
.PP
http://www.tuxedo.org/~esr/bogofilter/
.PP
http://sourceforge.net/projects/bogofilter/
