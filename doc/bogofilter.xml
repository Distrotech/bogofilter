<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                   "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id='bogofilter.1'>
<refmeta>
<refentrytitle>bogofilter</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv id='name'>
<refname>bogofilter</refname>
<refpurpose>fast Bayesian spam filter</refpurpose>
</refnamediv>
<refsynopsisdiv id='synopsis'>

<cmdsynopsis>
  <command>bogofilter</command>
  <arg choice='opt'>-h</arg>
  <arg choice='opt'>-s</arg>
  <arg choice='opt'>-n</arg>
  <arg choice='opt'>-S</arg>
  <arg choice='opt'>-N</arg>
  <arg choice='opt'>-d <replaceable>dir</replaceable></arg>
  <arg choice='opt'>-l</arg>
  <arg choice='opt'>-L <replaceable>tag</replaceable></arg>
  <arg choice='opt'>-m <replaceable>value</replaceable></arg>
  <arg choice='opt'>-o <replaceable><optional>value</optional>
      <optional>,value</optional></replaceable></arg>
  <arg choice='opt'>-p</arg>
  <arg choice='opt'>-e</arg>
  <arg choice='opt'>-g</arg>
  <arg choice='opt'>-r</arg>
  <arg choice='opt'>-f</arg>
  <arg choice='opt'>-2</arg>
  <arg choice='opt'>-3</arg>
  <arg choice='opt'>-R</arg>
  <arg choice='opt'>-u</arg>
  <arg choice='opt'>-v</arg>
  <arg choice='opt'>-V</arg>
  <arg choice='opt'>-x <replaceable>flags</replaceable></arg>
  <arg choice='opt'>-c <replaceable>filename</replaceable></arg>
  <arg choice='opt'>-C</arg>
  <arg choice='opt'>-q</arg>
  <arg choice='opt'>-F</arg>
  <arg choice='opt'>-I <replaceable>filename</replaceable></arg>
  <arg choice='opt'>-O <replaceable>filename</replaceable></arg>
  <arg choice='opt'>-y <replaceable>date</replaceable></arg>
</cmdsynopsis>

</refsynopsisdiv>

<refsect1 id='description'><title>DESCRIPTION</title>
<para><application>Bogofilter</application> is a Bayesian spam filter.
In its normal mode of operation, it takes an email message or other
text on standard input, does a statistical check against lists of
"good" and "bad" words, and returns a status code indicating whether
or not the message is spam.  Bogofilter is designed with fast
algorithms, uses the Berkeley DB for fast startup and lookups,
coded directly in C, and tuned for speed, so it can be used for
production by sites that process a lot of mail.</para>
</refsect1>

<refsect1 id='theory'><title>THEORY OF OPERATION</title>
<para><application>Bogofilter</application> treats its input as a bag
of tokens.  Each token is checked against "good" and "bad" wordlists,
which maintain counts of the numbers of times it has occurred in
non-spam and spam mails.  These numbers are used to compute the
probability that a mail in which the token occurs is spam.  After
probabilities for all input tokens have been computed, a fixed number
of the probabilities that deviate furtherest from average are combined
using Bayes's theorem on conditional probabilities.  If the computed
probability that the input is spam exceeds a cutoff determined at 
compile time (currently 0.95, for the Robinson-Fisher algorithm),
<application>bogofilter</application> returns 0, otherwise 1.</para>

<para>While this method sounds crude compared to the more usual
pattern-matching approach, it turns out to be extremely effective.
Paul Graham's paper <ulink url="http://www.paulgraham.com/spam.html">
A Plan For Spam</ulink> is recommended reading.</para>

<para>This program substantially improves on Paul's proposal by doing smarter
lexical analysis.  In particular, hostames and IP addresses are retained
as recognition features rather than broken up.  Various kinds of MTA 
cruft such as dates and message-IDs are discarded so as not to bloat
the word lists.  Lex's Swiss-army-knife nature rises again.</para>

<para>Another seeming improvement is that this program offers Gary
Robinson's suggested modifications (S and f(w) but not g(w)) to the
calculations.  These modifications are described in Robinson's paper <ulink
url="http://radio.weblogs.com/0101454/stories/2002/09/16/spamDetection.html">
Spam Detection</ulink>.</para>

<para>Since then, Robinson and others have
realized that the S calculation can be further optimized: if a vector of
length k contains random, uniformly-distributed probabilities p, then
-2 * sum(ln(p)) is distributed as chi-squared with 2n degrees of
freedom.  This is believed to be the most sensitive test of the
hypothesis that the vector of probabilities is, in fact, uniformly
distributed.  Bogofilter now offers the option of applying this test
(known as Fisher's method) to yield P(spam) and P(not spam), and using
the difference as the "spamicity" score.</para>

<para>The input may be one message or many.  Messages are broken up
on From_ lines.  The algorithm is relatively insensitive to message
miscounts.</para>

<para>For speed, MIME and other attachments are not decoded.</para>
</refsect1>

<refsect1 id='options'><title>OPTIONS</title>
<para>Without command-line options, <application>bogofilter</application>
returns 1 if the message is non-spam, 0 if it is spam.  The non-spam
wordfile is created if absent.</para>

<para>The <option>-h</option> option prints the help message and exits.</para>

<para>The <option>-s</option> option tells <application>bogofilter</application>
to register the text presented on standard input as spam.  The spam
wordfile is created if absent.</para>

<para>The <option>-n</option> option tells
<application>bogofilter</application> to register the text presented
on standard input as non-spam.</para>

<para>The <option>-S</option> option tells
<application>bogofilter</application> to undo a prior registration of the
same message as spam.  If a message was incorrectly entered in the spam 
wordfile by '-n' or '-u' and you want to remove it from the spam wordfile
and enter it in the non-spam wordfile, use options '-Sn'.</para>

<para>The <option>-N</option> option tells
<application>bogofilter</application> to undo a prior registration of the
same message as non-spam.  If a message was incorrectly entered in the non-spam 
wordfile by '-n' or '-u' and you want to remove it from the non-spam wordfile and
enter it in the spam wordfile, then use '-Ns'.</para>

<para>The <option>-u</option> option tells
<application>bogofilter</application> to register the message's text 
after classifying it as spam or non-spam.  A spam message will be registered
on the spamlist and a non-spam message on the goodlist.  If using the
Robinson-Fisher method and the classification is "unsure", the message will
not be registered.</para>

<para>The <option>-2</option> option tells
<application>bogofilter</application> to binary classify the message as either
ham or spam, and never as unsure.  When this option is used with <option>-u</option>,
a wordlist is always updated.</para>

<para>The <option>-3</option> option tells
<application>bogofilter</application> to use three-state classification for the message,
i.e. classify the message as ham, spam, or unsure.  This option is effective only if
ham_cutoff is non-zereo.</para>

<para>The <option>-d</option><replaceable> dir</replaceable> option
    allows you to set the directory under which wordlists will be found
    to <replaceable>dir</replaceable>.  If omitted, the default directory
    will be <filename>$BOGOFILTER_DIR</filename> if
    <envar>BOGOFILTER_DIR</envar> is set and
    <filename>$HOME/.bogofilter</filename> otherwise.</para>

<para>The <option>-l</option> option writes an informational line
    to the system log each time <application>bogofilter</application>
    is run.  The information logged depends on how
    <application>bogofilter</application> is run.</para>

<para>The <option>-L <replaceable>tag</replaceable></option> option
    configures a tag which can be included in the information being
    logged by the <option>-l</option> option, but it requires a custom
    format that includes the %l string for now.  This option implies
    <option>-l</option>.</para>

<para>The <option>-m <replaceable>value</replaceable></option> option allows setting min_dev.
</para>

<para>The <option>-o
	<replaceable><optional>value</optional><optional>,value</optional></replaceable></option>
      option allows setting the spam_cutoff value and, optionally, the
      ham_cutoff value.  If one value is supplied, then spam_cutoff is
      set.  If a comma followed by one value is supplied, then ham_cutoff
      is set.  With two values, both spam_cutoff and ham_cutoff are set.  Note the
      syntax is misleading, at least one of the values MUST be present,
      and the comma determines whether it is to set the spam or the ham
      cutoff.  Note: spaces are not allowed after the comma.
</para>

<para>The <option>-p</option> (passthrough) option writes a copy of
the input mail to the output with an X-Bogosity header (in the
style of SpamAssassin) inserted.  The header will begin with "Yes" or
"No" according as the mail is judged to be spam or non-spam
respectively.  Note: the memory consumption depends on whether the input
file is regular and allows seek operations.  Within these constraints,
the file will be rewound and read a second time, without using much
memory.  If the input file however is not regular (for example, a
pipeline or socket), then bogofilter will cache a copy if the entire
mail in memory.</para>

<para>The <option>-e</option> (embed) option is only effective when
    <option>-p</option> is also active.  If both options are used, then
    bogofilter will exit with code 0 even if the mail is not spam.  This
    simplifies using bogofilter from procmail or maildrop.</para>

<para>The <option>-u</option> (update) option tells
<application>bogofilter</application> to update the appropriate
wordfile automatically.  If the text presented on standard input is
spam, the spam wordfile will be updated.  If the text is not spam, the
good wordfile will be updated.  Effectively this option runs
<application>bogofilter</application> with the <option>-s</option> or
<option>-n</option> flag, as appropriate.  (Caution is urged in the use
of this capability, as any classification errors
<application>bogofilter</application> may make will be preserved and
accumulated until corrected with the <option>-Sn</option> and
<option>-Ns</option> option combinationss.)</para>
  
<para>The <option>-v</option> option produces a report to standard 
output on <application>bogofilter</application>'s analysis af the
input.  Each additional <option>v</option> will increase the verbosity of
the output, up to a maximum of 4.  With <option>-vv</option>, the report
lists the tokens with highest deviation from a mean of 0.5 association
with spam.</para>

<para>The Robinson-Fisher method is the default algorithm used for computing a
message's spamicity score, unless <application>bogofilter</application> 
has been compiled without it, by using the 
<option>--disable-robinson-fisher</option> option to the configure
script.  The method to be used can be specified on the command line or
in the configuration file.</para>

<para>The <option>-g</option> option selects the original Graham form
of the calculation method.</para>

<para>The <option>-r</option> option selects the Robinson modifications
to the calculation method.</para>

<para>The <option>-f</option> option selects the Robinson-Fisher
modifications to the calculation method.</para>

<para>The configure script has options
<option>--disable-graham-method</option>,
<option>--disable-robinson-method</option>, and
<option>--disable-robinson-fisher</option> so that
<application>bogofilter</application> can be built to support a subset
of the available methods.</para>

<para>The <option>-R</option> option tells
<application>bogofilter</application> to output an R data frame in
text form on the standard output.  See the section on integration with
R, below, for further detail.</para>

<para>The <option>-V</option> option prints the version number and 
exits.</para>

<para>The <option>-x <replaceable>flags</replaceable></option> option 
allows setting of debug flags for printing debug messages.</para>

<para>The <option>-c</option><replaceable>filename</replaceable> option
tells <application>bogofilter</application> to read the config file named.
</para>

<para>The <option>-C</option> option prevents bogofilter from reading
    configuration files.</para>

<para>The <option>-q</option> (quiet) suppresses warning messages.</para>

<para>The <option>-F</option> (force) ignores threshold values when printing spamicity statistics.</para>

<para>The <option>-I </option><replaceable>filename</replaceable> option
tells <application>bogofilter</application> to read its input from the specified file, 
rather than from <option>stdin</option> 
</para>

<para>The <option>-O </option><replaceable>filename</replaceable> option
tells <application>bogofilter</application> where to write its output in
passthrough mode.  Note that this only works when -p is explicitly given.</para>

<para>
  Option <option>-y date</option> is specifies the date to give to tokens that don't have dates.
</para>

</refsect1>

<refsect1 id='environment'><title>ENVIRONMENT</title>
    <para>
	Bogofilter will initialize its data base directory to 
	<filename>$BOGOFILTER_DIR</filename> if <envar>BOGOFILTER_DIR</envar> is set.
	If it is not set, bogofilter
	will use <filename>$HOME/.bogofilter</filename> instead.  If neither
	 <envar>BOGOFILTER_DIR</envar> nor <envar>HOME</envar> is set, the <option>-d
	    <replaceable>dir</replaceable></option> option must be present.
</para></refsect1>

<refsect1 id='configuration'><title>CONFIGURATION</title>
<para>The <application>bogofilter</application> command line allows setting of many 
options that determine how <application>bogofilter</application> operates.
File <filename>@sysconfdir@/bogofilter.cf</filename> can be used to set additional
parameters that affect its operation.  File 
<filename>@sysconfdir@/bogofilter.cf.example</filename> has samples of all of the parameters.
Status and logging messages can be customized for each site (see 
<filename>@sysconfdir@/bogofilter.cf.example</filename>).
</para>
</refsect1>

<refsect1 id='returns'><title>RETURN VALUES</title>
<para>0 for spam; 1 for non-spam; 2 for I/O or other errors.</para>
<para>If both <option>-p</option> and <option>-e</option> are used, the
    return values are: 0 for spam or non-spam; 2 for I/O or other
    errors.</para>

<para>Error 2 usually means that the wordlist files
<application>bogofilter</application> wants to read at startup 
are missing or the hard disk has filled up in <option>-p</option> mode.</para>
</refsect1>

<refsect1 id='integration'><title>INTEGRATION WITH OTHER TOOLS</title>

<para>Use with Procmail</para>
<para>The following procmail rule will take mail on stdin and direct
it to <filename>Mail/spam</filename> if
<application>bogofilter</application> thinks it's spam:
<programlisting>:0HB:
* ? bogofilter
Mail/spam
</programlisting>

and this similar rule will also register the tokens in the mail
according to the bogofilter classification:

<programlisting>:0HB:
* ? bogofilter -u
Mail/spam
</programlisting>
</para>
<para>If <application>bogofilter</application> fails (returning 2) the
message will be treated as non-spam.</para>

<para>The following recipe (a) spam-bins anything that
<application>bogofilter</application> rates as spam, (b) adds the
words in messages rated as spam to the spam wordlist, and (c) adds the
words in messages rated as non-spam to the non-spam wordlist.  With
this in place, it will normally only be necessary for the user to
intervene (with <option>-Ns</option> or <option>-Sn</option>) when
<application>bogofilter</application> miscategorizes something.</para>
<programlisting>
  <lineannotation>
# filter mail through bogofilter, tagging it as spam and
# updating the word lists
</lineannotation>
:0fw
| bogofilter -u -e -p

<lineannotation>
# if bogofilter failed, return the mail to the queue, the MTA will
# retry to deliver it later
# 75 is the value for EX_TEMPFAIL in /usr/include/sysexits.h
</lineannotation>
:0e
{ EXITCODE=75 HOST }

<lineannotation>
# file the mail to <filename>spam-bogofilter</filename> if it's spam.
</lineannotation>
:0:
* ^X-Bogosity: Yes, tests=bogofilter
spam-bogofilter

</programlisting>

<para>This one is for maildrop, it automatically defers the mail and
    retries later when the xfilter command fails, use this in your
    <filename>~/.mailfilter</filename>:</para>
<programlisting>xfilter "bogofilter -u -e -p"
if (/^X-Bogosity: Yes, tests=bogofilter/)
{
  to "spam-bogofilter"
}
</programlisting>

<para>The following <filename>.muttrc</filename> lines will create
mutt macros for dispatching mail to
<application>bogofilter</application>.</para>
<programlisting>macro index d "&lt;enter-command&gt;unset wait_key\n\
&lt;pipe-entry&gt;bogofilter -n\n\
&lt;enter-command&gt;set wait_key\n\
&lt;delete-message&gt;" "delete message as non-spam"
macro index \ed "&lt;enter-command&gt;unset wait_key\n\
&lt;pipe-entry&gt;bogofilter -s\n\
&lt;enter-command&gt;set wait_key\n\
&lt;delete-message&gt;" "delete message as spam"
</programlisting>

<para>Integration with Mail Transport Agent (MTA)</para>
<procedure>
<step>
 <para><application>bogofilter</application> can also be integrated into an MTA 
  to filter all incoming mail.  While the specific implementation is MTA dependent, the
  general steps are as follows</para>
</step>

<step>
 <para>Install <application>bogofilter</application> on the mail server</para>
</step>
<step>
 <para>Prime the bogofilter databases with a spam and non-spam corpus.
 Since <application>bogofilter</application> will be serving a larger community,
 it is important to prime it with a representative set of messages.</para>
</step>
<step>
 <para>Set up the MTA to invoke bogofilter on each message.
   While this is an MTA specific step, you'll probably need to use the 
   <option>-p</option>, <option>-u</option>, and <option>-e</option> options.</para>
</step>
<step>
 <para>Set up a mechanism for users to register spam/nonspam messages,
 as well as to correct mis-classifications.
 The most generic solution is to set up alias email addresses to which
 users bounce messages.</para>
</step>
<step>
<para>See the <filename>doc</filename> and <filename>contrib</filename> directories for more information</para>
</step>
</procedure>
<para>Use of R to verify <application>Bogofilter</application>
calculations</para>

<para>The -R option tells <application>bogofilter</application> to
generate an R data frame.  The data frame contains one row per token
analysed.  Each such row contains the token, the sum of its database
"good" and "spam" counts, the "good" count divided by the number of
non-spam messages used to create the training database, the "spam"
count divided by the spam message count, Robinson's f(w) for the token,
the natural logs of (1 - f(w)) and f(w), and an indicator character (+
if the token's f(w) value exceeded the minimum deviation from 0.5, - if
it didn't).  There is one additional row at the end of the table that
contains a label in the token field, followed by the number of words
actually used (the ones with + indicators), Robinson's P, Q, S, s and x
values and the minimum deviation.</para>

<para>The R data frame can be saved to a file and later read
into an R session (see <ulink url="http://cran.r-project.org">the R
project website</ulink> for information about the mathematics package
R).  Provided with the <application>bogofilter</application>
distribution is a simple R script (file bogo.R) that can be used to
verify <application>bogofilter</application>'s calculations.
Instructions for its use are included in the script in the form of
comments.</para>
</refsect1>

<refsect1 id='logmessages'><title>Log messages</title>

<para>Bogofilter writes messages to the system log when the <option>-l</option> 
option is used.  What is written depends on which other flags are used.</para>

<para>A classification run will generate (we are not showing the date
    and host part here):
<screen>
bogofilter[1412]: X-Bogosity: No, spamicity=0.000227
bogofilter[1415]: X-Bogosity: Yes, spamicity=0.998918
</screen></para>
<para>Using '-u' to classify a message and update a wordlist will
    produce (one a single line):
    <screen>
bogofilter[1426]: X-Bogosity: Yes, spamicity=0.998918,
  register -s, 329 words, 1 messages
    </screen></para>
    <para>Registering words ('-l' and '-s', '-n', '-S', or '-N') will produce:
	<screen>
bogofilter[1440]: register-n, 255 words, 1 messages
    </screen>
</para>

<para>A registration run (using '-s', '-n', '-N', or '-S') will generate messages like:
<screen>
bogofilter[17330]: register-n, 574 words, 3 messages
bogofilter[6244]: register-s, 1273 words, 4 messages
</screen></para>
</refsect1>

<refsect1 id='files'><title>FILES</title>
<variablelist>
<varlistentry>
<term><filename>@sysconfdir@/bogofilter.cf</filename></term>
<listitem><para>System configuration file.</para></listitem>
</varlistentry>
<varlistentry>
<term><filename>~/.bogofilter.cf</filename></term>
<listitem><para>User configuration file.</para></listitem>
</varlistentry>
<varlistentry>
<term><filename>~/.bogofilter/goodlist.db</filename></term>
<listitem><para>List of good tokens.</para></listitem>
</varlistentry>
<varlistentry>
<term><filename>~/.bogofilter/spamlist.db</filename></term>
<listitem><para>List of spam tokens.</para></listitem>
</varlistentry>
</variablelist>
</refsect1>

<refsect1 id='bugs'><title>BUGS</title>
<para><application>bogofilter</application> counts messages on input 
by looking for From_ lines.  As a special case, a single message
without From_ line is counted correctly.  Multiple messages without 
intervening From_ lines will be counted as one message.</para>

<para>Bogofilter does not canonicalize the transport encoding or
    character set, sacrificing precision.  We used to believe that spam
    with enclosures invariably gives itself away through cues in the
    headers and non-enclosure parts, but this is not true.  This will be
    fixed in a future version.</para>
</refsect1>

<refsect1 id='author'><title>AUTHOR</title>
    <para>Eric S. Raymond <email>esr@thyrsus.com</email>.</para>
    <para>For updates, see <ulink url="http://bogofilter.sourceforge.net/">
the bogofilter project page</ulink>.</para>
</refsect1>
</refentry>
